diff --git a/node_modules/@bacons/head/build/ExpoHead.ios.js b/node_modules/@bacons/head/build/ExpoHead.ios.js
index 1004475..0619ee2 100644
--- a/node_modules/@bacons/head/build/ExpoHead.ios.js
+++ b/node_modules/@bacons/head/build/ExpoHead.ios.js
@@ -40,7 +40,7 @@ export function setWebUrl(url) {
 function getStaticUrlFromExpoRouter(href) {
     // const host = "https://expo.io";
     // Append the URL we'd find in context
-    return getWebUrl() + "/" + href;
+    return getWebUrl() + href;
 }
 function getWebUrl() {
     if (!webUrl) {
@@ -54,22 +54,40 @@ function urlToId(url) {
 function getLastSegment(path) {
     // Remove the extension
     const lastSegment = path.split("/").pop() ?? "";
-    return lastSegment.replace(/\.[^/.]+$/, "");
+    return lastSegment.replace(/\.[^/.]+$/, "").split("?")[0];
 }
 // Maybe use geo from structured data -- https://developers.google.com/search/docs/appearance/structured-data/local-business
 // import { useContextKey } from "expo-router/build/Route";
 // import { AppState, Linking } from "react-native";
 export function Head({ children }) {
     const link = useHref();
+    const { renderableChildren, metaChildren } = React.useMemo(() => {
+        const renderableChildren = [];
+        const metaChildren = [];
+
+        React.Children.forEach(children, (child) => {
+            if (!React.isValidElement(child)) {
+                return;
+            }
+            if (typeof child.type === "string") {
+                metaChildren.push(child);
+            } else {
+                renderableChildren.push(child);
+            }
+        });
+
+        return { renderableChildren, metaChildren };
+    }, [children]);
+
+    console.log('children:', renderableChildren, metaChildren);
+
     const activity = React.useMemo(() => {
         const userActivity = {
             title: getLastSegment(link.href),
             activityType: ExpoHead.activities.INDEXED_ROUTE,
         };
-        React.Children.forEach(children, (child) => {
-            if (!React.isValidElement(child)) {
-                return;
-            }
+
+        metaChildren.forEach((child) => {
             if (child.type === "title") {
                 userActivity.title = child.props.children;
             }
@@ -91,14 +109,14 @@ export function Head({ children }) {
                     userActivity.webpageURL = content;
                 }
                 if (property === "og:image") {
-                    if (media === "(prefers-color-scheme: dark)") {
+                //     if (media === "(prefers-color-scheme: dark)") {
                         // console.log("SETTING DARK IMAGE URL", content);
                         userActivity.darkImageUrl = content;
-                    }
-                    else {
-                        // console.log("SETTING IMAGE URL", content);
-                        userActivity.imageUrl = content;
-                    }
+                //     }
+                //     else {
+                //         // console.log("SETTING IMAGE URL", content);
+                //         userActivity.imageUrl = content;
+                //     }
                 }
                 // <meta name="keywords" content="foo,bar,baz" />
                 if (["keywords"].includes(name)) {
@@ -125,7 +143,7 @@ export function Head({ children }) {
             resolved.id = urlToId(resolved.webpageURL);
         }
         return resolved;
-    }, [children, link.href]);
+    }, [metaChildren, link.href]);
     React.useEffect(() => {
         if (activity) {
             ExpoHead.createActivity(activity);
@@ -140,6 +158,6 @@ export function Head({ children }) {
     //     ExpoHead.suspendActivity("[TODO-SOME-PAGE-ID]");
     //   };
     // }, []);
-    return null;
+    return renderableChildren;
 }
 //# sourceMappingURL=ExpoHead.ios.js.map
\ No newline at end of file
diff --git a/node_modules/@bacons/head/ios/ExpoHeadAppDelegateSubscriber.swift b/node_modules/@bacons/head/ios/ExpoHeadAppDelegateSubscriber.swift
index 15dfb2e..21f7823 100644
--- a/node_modules/@bacons/head/ios/ExpoHeadAppDelegateSubscriber.swift
+++ b/node_modules/@bacons/head/ios/ExpoHeadAppDelegateSubscriber.swift
@@ -27,7 +27,61 @@ public struct InfoPlist
     }
 }
 
+func encoded(_ value: String) -> String {
+  return value.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? value
+}
+
+func userInfoToQueryString(_ userInfo: [String : NSSecureCoding]?) -> String {
+  guard let userInfo = userInfo else {
+    return ""
+  }
+  var queryString = ""
+  for (key, value) in userInfo {
+    if let value = value as? String {
+      if key != "href" {
+        queryString += "&\(encoded(key))=\(encoded(value))"
+      }
+    }
+  }
+  return queryString
+}
+
 public class ExpoHeadAppDelegateSubscriber: ExpoAppDelegateSubscriber {
+
+  public func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -> Void) {
+    let schemes = InfoPlist.bundleURLSchemes()
+    // TODO: Allow user to define the scheme using structured data or something.
+    // opensearch = Chrome. spotlight = custom thing we're using to identify iOS
+    var url = "\(schemes[0]):/"
+
+    if let wellKnownHref = shortcutItem.userInfo?["href"] as? String {
+      url += wellKnownHref
+    } else {
+      url += "/"
+    }
+
+    url += "?title=\(encoded(shortcutItem.localizedTitle ))&id=\(encoded(shortcutItem.type))"
+
+    url += userInfoToQueryString(shortcutItem.userInfo)
+
+    if let subtitle = shortcutItem.localizedSubtitle {
+      url += "&subtitle=\(encoded(subtitle))"
+    }
+
+    url += "&ref=shortcut"
+
+    // https://github.com/search?q=
+    NotificationCenter.default.post(
+      name: NSNotification.Name(rawValue: "RCTOpenURLNotification"),
+      object: self,
+      userInfo: ["url": url]);
+  }
+
+  public func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
+    
+    return false;
+  }
+
   public func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
     launchedActivity = userActivity
 
@@ -43,7 +97,8 @@ public class ExpoHeadAppDelegateSubscriber: ExpoAppDelegateSubscriber {
         let schemes = InfoPlist.bundleURLSchemes()
         let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? query
         // TODO: Allow user to define the scheme using structured data or something.
-        let url = "\(schemes[0])://search?q=\(encodedQuery)&ref=opensearch"
+        // opensearch = Chrome. spotlight = custom thing we're using to identify iOS
+        let url = "\(schemes[0])://search?q=\(encodedQuery)&ref=spotlight"
 
         // https://github.com/search?q=
         NotificationCenter.default.post(
diff --git a/node_modules/@bacons/head/ios/ExpoHeadModule.swift b/node_modules/@bacons/head/ios/ExpoHeadModule.swift
index ef95609..9b10dc3 100644
--- a/node_modules/@bacons/head/ios/ExpoHeadModule.swift
+++ b/node_modules/@bacons/head/ios/ExpoHeadModule.swift
@@ -4,6 +4,21 @@ import MobileCoreServices
 // https://developer.apple.com/documentation/foundation/nsuseractivity/3552239-shortcutavailability
 //import Intents
 
+struct ShortcutOptions: Record {
+
+  @Field
+  var id: String!
+  @Field
+  var title: String!
+  @Field
+  var subtitle: String?
+  @Field
+  var info: [String: NSSecureCoding]?
+  @Field
+  var icon: String?
+}
+
+
 struct MetadataOptions: Record {
   @Field
   var activityType: String!
@@ -40,6 +55,83 @@ let INDEXED_ROUTE = Bundle.main.bundleIdentifier! + ".expo.index_route"
 
 var launchedActivity: NSUserActivity?
 
+func stringToUIApplicationShortcutIcon(_ str: String?) -> UIApplicationShortcutIcon? {
+  guard let stringType = str else {
+    return nil
+  }
+  if let type = stringToUIApplicationShortcutIconType(stringType) {
+    return UIApplicationShortcutIcon(type: type)
+  }
+  return nil
+
+}
+
+func stringToUIApplicationShortcutIconType(_ str: String) -> UIApplicationShortcutIcon.IconType? {
+  switch str {
+  case "compose":
+    return .compose
+  case "play":
+    return .play
+  case "pause":
+    return .pause
+  case "add":
+    return .add
+  case "location":
+    return .location
+  case "search":
+    return .search
+  case "share":
+    return .share
+  case "prohibit":
+    return .prohibit
+  case "contact":
+    return .contact
+  case "home":
+    return .home
+  case "markLocation":
+    return .markLocation
+  case "favorite":
+    return .favorite
+  case "love":
+    return .love
+  case "cloud":
+    return .cloud
+  case "invitation":
+    return .invitation
+  case "confirmation":
+    return .confirmation
+  case "mail":
+    return .mail
+  case "message":
+    return .message
+  case "date":
+    return .date
+  case "time":
+    return .time
+  case "capturePhoto":
+    return .capturePhoto
+  case "captureVideo":
+    return .captureVideo
+  case "task":
+    return .task
+  case "taskCompleted":
+    return .taskCompleted
+  case "alarm":
+    return .alarm
+  case "bookmark":
+    return .bookmark
+  case "shuffle":
+    return .shuffle
+  case "audio":
+    return .audio
+  case "update":
+    return .update
+  default:
+    return nil
+  }
+}
+
+
 public class ExpoHeadModule: Module {
   private var activities = Set<NSUserActivity>()
 
@@ -88,73 +180,83 @@ public class ExpoHeadModule: Module {
       return nil
     }
 
+    AsyncFunction("defineShortcuts") { (items: [ShortcutOptions]) in
+
+      var shortcuts: [UIApplicationShortcutItem] = []
+      for value in items {
+        shortcuts.append(UIApplicationShortcutItem(
+          type: value.id,
+          localizedTitle: value.title,
+          localizedSubtitle: value.subtitle,
+          icon: stringToUIApplicationShortcutIcon(value.icon),
+          userInfo: value.info
+        ))
+      }
+
+      DispatchQueue.main.async {
+        UIApplication.shared.shortcutItems = shortcuts
+      }
+    }
+
+
     // Defines a JavaScript function that always returns a Promise and whose native code
     // is by default dispatched on the different thread than the JavaScript runtime runs on.
     AsyncFunction("createActivity") { (value: MetadataOptions) in
-
+      let att = CSSearchableItemAttributeSet(itemContentType: kUTTypeText as String)
       let activity = self.activities.first(where: { $0.persistentIdentifier == value.id }) ?? NSUserActivity(activityType: value.activityType)
 
     // TODO: https://gist.github.com/alexruperez/ea81aa3e371f7d0d7ea5e594d7e9ad08
 //         let activity = NSUserActivity(activityType: value.activityType)
-        activity.persistentIdentifier = value.id
-        activity.isEligibleForHandoff = true
-        activity.isEligibleForPublicIndexing = true
-        activity.isEligibleForSearch = value.eligibleForSearch
-        activity.isEligibleForPrediction = true;
-      // Make all indexed routes deletable
-      activity.contentAttributeSet?.domainIdentifier = INDEXED_ROUTE
+      activity.persistentIdentifier = value.id
+      activity.isEligibleForHandoff = true
+      activity.isEligibleForPublicIndexing = true
+      activity.isEligibleForSearch = value.eligibleForSearch
+      activity.isEligibleForPrediction = true;
+      activity.title = value.title
       
       if let keywords = value.keywords {
         activity.keywords = Set(keywords)
       }
 
       activity.userInfo = value.userInfo
-
-//      let att = CSSearchableItemAttributeSet(
-//           itemContentType: kUTTypeText as String)
-      let att = CSSearchableItemAttributeSet(
-           itemContentType: kUTTypeContent as String)
-//      kUTTypeItem
-      activity.contentAttributeSet = att;
-      activity.contentAttributeSet?.metadataModificationDate = value.dateModified
-
       // Required for handling incoming requests
       activity.requiredUserInfoKeys = ["href"]
+      activity.expirationDate = value.expirationDate
+
+      if (value.webpageURL != nil) {
+        // If you’re using all three APIs, it works well to use the URL of the relevant webpage as the value for uniqueIdentifier, relatedUniqueIdentifier, and webpageURL.
+        // https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/CombiningAPIs.html#//apple_ref/doc/uid/TP40016308-CH10-SW1
+        activity.webpageURL = value.webpageURL
+        // activity.uniqueIdentifier = value.webpageURL?.absoluteString
+//        att.relatedUniqueIdentifier = value.webpageURL?.absoluteString
+      }
+
+      att.title = value.title
+      att.metadataModificationDate = value.dateModified
+      // Make all indexed routes deletable
+      att.domainIdentifier = INDEXED_ROUTE
 
       if let localUrl = value.imageUrl?.path {
-       activity.contentAttributeSet?.thumbnailURL = value.imageUrl
+        att.thumbnailURL = value.imageUrl
         // let img = UIImage(contentsOfFile: localUrl)
         // if let data = img?.pngData() {
         //   activity.contentAttributeSet?.thumbnailData = data
         // }
       }
+      if let darkImageUrl = value.darkImageUrl {
+        att.darkThumbnailURL = darkImageUrl
+      }
 
-      activity.contentAttributeSet?.darkThumbnailURL = value.darkImageUrl
-
-      activity.contentAttributeSet?.contentDescription = value.description
-
-      activity.title = value.title
-      activity.contentAttributeSet?.title = value.title
+      if let description = value.description {
+        att.contentDescription = description
+      }
 
-      activity.expirationDate = value.expirationDate
+      activity.contentAttributeSet = att;
 
-      if (value.webpageURL != nil) {
-        // If you’re using all three APIs, it works well to use the URL of the relevant webpage as the value for uniqueIdentifier, relatedUniqueIdentifier, and webpageURL.
-        // https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/CombiningAPIs.html#//apple_ref/doc/uid/TP40016308-CH10-SW1
-        activity.webpageURL = value.webpageURL
-        // activity.uniqueIdentifier = value.webpageURL?.absoluteString
-        activity.contentAttributeSet?.relatedUniqueIdentifier = value.webpageURL?.absoluteString
-      }
       self.activities.insert(activity)
 
-       // activity.userInfo = [self.userActivityType.userInfoKey: self.userActivityUniqueIdentifier]
-       // activity.keywords = UserActivityType.keywords
-       // activity.contentAttributeSet = attributeSet
-//         activity.needsSave = true
-         activity.becomeCurrent()
-
+      activity.becomeCurrent()
         // TODO: Fallback on using app icon as thumbnail image.
-
     }
 
     AsyncFunction("clearActivities") { (ids: [String], promise: Promise) in
